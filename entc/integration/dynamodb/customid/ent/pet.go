// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// Pet is the model entity for the Pet schema.
type Pet struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PetQuery when eager-loading is set.
	Edges           PetEdges `json:"edges"`
	pet_best_friend *string
	user_pets       *int
	friend_id       []string
}

// PetEdges holds the relations/edges for other nodes in the graph.
type PetEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Cars holds the value of the cars edge.
	Cars []*Car `json:"cars,omitempty"`
	// Friends holds the value of the friends edge.
	Friends []*Pet `json:"friends,omitempty"`
	// BestFriend holds the value of the best_friend edge.
	BestFriend *Pet `json:"best_friend,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PetItem represents item schema in MongoDB.
type PetItem struct {
	ID string `dynamodbav:"id"`

	PetBestFriend *string `dynamodbav:"pet_best_friend"`
	UserPets      *int    `dynamodbav:"user_pets"`

	FriendID []string `dynamodbav:"friend_id"`
}

// item returns the object for receiving item from dynamodb.
func (*Pet) item() interface{} {
	return &PetItem{}
}

// FromItem scans the dynamodb response item into Pet.
func (pe *Pet) FromItem(item interface{}) error {
	var petItem PetItem
	err := attributevalue.UnmarshalMap(item.(map[string]types.AttributeValue), &petItem)
	if err != nil {
		return err
	}
	pe.ID = petItem.ID

	pe.pet_best_friend = petItem.PetBestFriend
	pe.user_pets = petItem.UserPets

	pe.friend_id = petItem.FriendID

	return nil
}

// QueryOwner queries the "owner" edge of the Pet entity.
func (pe *Pet) QueryOwner() *UserQuery {
	return (&PetClient{config: pe.config}).QueryOwner(pe)
}

// QueryCars queries the "cars" edge of the Pet entity.
func (pe *Pet) QueryCars() *CarQuery {
	return (&PetClient{config: pe.config}).QueryCars(pe)
}

// QueryFriends queries the "friends" edge of the Pet entity.
func (pe *Pet) QueryFriends() *PetQuery {
	return (&PetClient{config: pe.config}).QueryFriends(pe)
}

// QueryBestFriend queries the "best_friend" edge of the Pet entity.
func (pe *Pet) QueryBestFriend() *PetQuery {
	return (&PetClient{config: pe.config}).QueryBestFriend(pe)
}

// Update returns a builder for updating this Pet.
// Note that you need to call Pet.Unwrap() before calling this method if this Pet
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Pet) Update() *PetUpdateOne {
	return (&PetClient{config: pe.config}).UpdateOne(pe)
}

// String implements the fmt.Stringer.
func (pe *Pet) String() string {
	var builder strings.Builder
	builder.WriteString("Pet(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Pets is a parsable slice of Pet.
type Pets []*Pet

func (pe Pets) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
