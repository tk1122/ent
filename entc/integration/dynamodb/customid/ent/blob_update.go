// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/dynamodb"
	"entgo.io/ent/dialect/dynamodb/dynamodbgraph"
	"entgo.io/ent/entc/integration/dynamodb/customid/ent/blob"
	"entgo.io/ent/entc/integration/dynamodb/customid/ent/predicate"
	"entgo.io/ent/schema/field"
	uuid "github.com/satori/go.uuid"
)

// BlobUpdate is the builder for updating Blob entities.
type BlobUpdate struct {
	config
	hooks    []Hook
	mutation *BlobMutation
}

// Where appends a list predicates to the BlobUpdate builder.
func (bu *BlobUpdate) Where(ps ...predicate.Blob) *BlobUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUUID sets the "uuid" field.
func (bu *BlobUpdate) SetUUID(u uuid.UUID) *BlobUpdate {
	bu.mutation.SetUUID(u)
	return bu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (bu *BlobUpdate) SetNillableUUID(u *uuid.UUID) *BlobUpdate {
	if u != nil {
		bu.SetUUID(*u)
	}
	return bu
}

// SetParentID sets the "parent" edge to the Blob entity by ID.
func (bu *BlobUpdate) SetParentID(id uuid.UUID) *BlobUpdate {
	bu.mutation.SetParentID(id)
	return bu
}

// SetNillableParentID sets the "parent" edge to the Blob entity by ID if the given value is not nil.
func (bu *BlobUpdate) SetNillableParentID(id *uuid.UUID) *BlobUpdate {
	if id != nil {
		bu = bu.SetParentID(*id)
	}
	return bu
}

// SetParent sets the "parent" edge to the Blob entity.
func (bu *BlobUpdate) SetParent(b *Blob) *BlobUpdate {
	return bu.SetParentID(b.ID)
}

// AddLinkIDs adds the "links" edge to the Blob entity by IDs.
func (bu *BlobUpdate) AddLinkIDs(ids ...uuid.UUID) *BlobUpdate {
	bu.mutation.AddLinkIDs(ids...)
	return bu
}

// AddLinks adds the "links" edges to the Blob entity.
func (bu *BlobUpdate) AddLinks(b ...*Blob) *BlobUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddLinkIDs(ids...)
}

// Mutation returns the BlobMutation object of the builder.
func (bu *BlobUpdate) Mutation() *BlobMutation {
	return bu.mutation
}

// ClearParent clears the "parent" edge to the Blob entity.
func (bu *BlobUpdate) ClearParent() *BlobUpdate {
	bu.mutation.ClearParent()
	return bu
}

// ClearLinks clears all "links" edges to the Blob entity.
func (bu *BlobUpdate) ClearLinks() *BlobUpdate {
	bu.mutation.ClearLinks()
	return bu
}

// RemoveLinkIDs removes the "links" edge to Blob entities by IDs.
func (bu *BlobUpdate) RemoveLinkIDs(ids ...uuid.UUID) *BlobUpdate {
	bu.mutation.RemoveLinkIDs(ids...)
	return bu
}

// RemoveLinks removes "links" edges to Blob entities.
func (bu *BlobUpdate) RemoveLinks(b ...*Blob) *BlobUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveLinkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.dynamodbSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.dynamodbSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlobUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlobUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlobUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BlobUpdate) dynamodbSave(ctx context.Context) (n int, err error) {
	_spec := &dynamodbgraph.UpdateSpec{
		Node: &dynamodbgraph.NodeSpec{
			Table: blob.Table,
			Keys:  blob.Keys,
			ID: &dynamodbgraph.FieldSpec{
				Type: field.TypeUUID,
				Key:  blob.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *dynamodb.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &dynamodbgraph.FieldSpec{
			Type:  field.TypeUUID,
			Value: value,
			Key:   blob.FieldUUID,
		})
	}
	if bu.mutation.ParentCleared() {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.O2O,
			Inverse:    false,
			Table:      blob.ParentTable,
			Attributes: []string{blob.ParentAttribute},
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.O2O,
			Inverse:    false,
			Table:      blob.ParentTable,
			Attributes: []string{blob.ParentAttribute},
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LinksCleared() {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.M2M,
			Inverse:    false,
			Table:      blob.LinksTable,
			Attributes: blob.LinksAttributes,
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedLinksIDs(); len(nodes) > 0 && !bu.mutation.LinksCleared() {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.M2M,
			Inverse:    false,
			Table:      blob.LinksTable,
			Attributes: blob.LinksAttributes,
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.M2M,
			Inverse:    false,
			Table:      blob.LinksTable,
			Attributes: blob.LinksAttributes,
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = dynamodbgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		return 0, err
	}
	return n, nil
}

// BlobUpdateOne is the builder for updating a single Blob entity.
type BlobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlobMutation
}

// SetUUID sets the "uuid" field.
func (buo *BlobUpdateOne) SetUUID(u uuid.UUID) *BlobUpdateOne {
	buo.mutation.SetUUID(u)
	return buo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (buo *BlobUpdateOne) SetNillableUUID(u *uuid.UUID) *BlobUpdateOne {
	if u != nil {
		buo.SetUUID(*u)
	}
	return buo
}

// SetParentID sets the "parent" edge to the Blob entity by ID.
func (buo *BlobUpdateOne) SetParentID(id uuid.UUID) *BlobUpdateOne {
	buo.mutation.SetParentID(id)
	return buo
}

// SetNillableParentID sets the "parent" edge to the Blob entity by ID if the given value is not nil.
func (buo *BlobUpdateOne) SetNillableParentID(id *uuid.UUID) *BlobUpdateOne {
	if id != nil {
		buo = buo.SetParentID(*id)
	}
	return buo
}

// SetParent sets the "parent" edge to the Blob entity.
func (buo *BlobUpdateOne) SetParent(b *Blob) *BlobUpdateOne {
	return buo.SetParentID(b.ID)
}

// AddLinkIDs adds the "links" edge to the Blob entity by IDs.
func (buo *BlobUpdateOne) AddLinkIDs(ids ...uuid.UUID) *BlobUpdateOne {
	buo.mutation.AddLinkIDs(ids...)
	return buo
}

// AddLinks adds the "links" edges to the Blob entity.
func (buo *BlobUpdateOne) AddLinks(b ...*Blob) *BlobUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddLinkIDs(ids...)
}

// Mutation returns the BlobMutation object of the builder.
func (buo *BlobUpdateOne) Mutation() *BlobMutation {
	return buo.mutation
}

// ClearParent clears the "parent" edge to the Blob entity.
func (buo *BlobUpdateOne) ClearParent() *BlobUpdateOne {
	buo.mutation.ClearParent()
	return buo
}

// ClearLinks clears all "links" edges to the Blob entity.
func (buo *BlobUpdateOne) ClearLinks() *BlobUpdateOne {
	buo.mutation.ClearLinks()
	return buo
}

// RemoveLinkIDs removes the "links" edge to Blob entities by IDs.
func (buo *BlobUpdateOne) RemoveLinkIDs(ids ...uuid.UUID) *BlobUpdateOne {
	buo.mutation.RemoveLinkIDs(ids...)
	return buo
}

// RemoveLinks removes "links" edges to Blob entities.
func (buo *BlobUpdateOne) RemoveLinks(b ...*Blob) *BlobUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveLinkIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlobUpdateOne) Select(field string, fields ...string) *BlobUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blob entity.
func (buo *BlobUpdateOne) Save(ctx context.Context) (*Blob, error) {
	var (
		err  error
		node *Blob
	)
	if len(buo.hooks) == 0 {
		node, err = buo.dynamodbSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.dynamodbSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Blob)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlobMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlobUpdateOne) SaveX(ctx context.Context) *Blob {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlobUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlobUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BlobUpdateOne) dynamodbSave(ctx context.Context) (_node *Blob, err error) {
	_spec := &dynamodbgraph.UpdateSpec{
		Node: &dynamodbgraph.NodeSpec{
			Table: blob.Table,
			Keys:  blob.Keys,
			ID: &dynamodbgraph.FieldSpec{
				Type: field.TypeUUID,
				Key:  blob.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Blob.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Keys = make([]string, 0, len(fields))
		_spec.Node.Keys = append(_spec.Node.Keys, blob.FieldID)
		for _, f := range fields {
			if !blob.ValidKey(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blob.FieldID {
				_spec.Node.Keys = append(_spec.Node.Keys, f)
			}
		}
	}
	if value, ok := buo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &dynamodbgraph.FieldSpec{
			Type:  field.TypeUUID,
			Value: value,
			Key:   blob.FieldUUID,
		})
	}
	if buo.mutation.ParentCleared() {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.O2O,
			Inverse:    false,
			Table:      blob.ParentTable,
			Attributes: []string{blob.ParentAttribute},
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.O2O,
			Inverse:    false,
			Table:      blob.ParentTable,
			Attributes: []string{blob.ParentAttribute},
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LinksCleared() {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.M2M,
			Inverse:    false,
			Table:      blob.LinksTable,
			Attributes: blob.LinksAttributes,
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedLinksIDs(); len(nodes) > 0 && !buo.mutation.LinksCleared() {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.M2M,
			Inverse:    false,
			Table:      blob.LinksTable,
			Attributes: blob.LinksAttributes,
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &dynamodbgraph.EdgeSpec{
			Rel:        dynamodbgraph.M2M,
			Inverse:    false,
			Table:      blob.LinksTable,
			Attributes: blob.LinksAttributes,
			Bidi:       true,
			Target: &dynamodbgraph.EdgeTarget{
				IDSpec: &dynamodbgraph.FieldSpec{
					Type: field.TypeUUID,
					Key:  blob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Item = _node.item
	_spec.Assign = func(item interface{}) error {
		_node = &Blob{}
		if err := _node.FromItem(item); err != nil {
			return err
		}
		_node.config = buo.config

		return nil
	}
	if err = dynamodbgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		return nil, err
	}
	return _node, nil
}
