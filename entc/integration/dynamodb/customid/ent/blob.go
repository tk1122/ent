// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	uuid "github.com/satori/go.uuid"
)

// Blob is the model entity for the Blob schema.
type Blob struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlobQuery when eager-loading is set.
	Edges       BlobEdges `json:"edges"`
	blob_parent *uuid.UUID
	link_id     []uuid.UUID
}

// BlobEdges holds the relations/edges for other nodes in the graph.
type BlobEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Blob `json:"parent,omitempty"`
	// Links holds the value of the links edge.
	Links []*Blob `json:"links,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlobItem represents item schema in MongoDB.
type BlobItem struct {
	ID   uuid.UUID `dynamodbav:"id"`
	UUID uuid.UUID `dynamodbav:"uuid"`

	BlobParent *uuid.UUID `dynamodbav:"blob_parent"`

	LinkID []uuid.UUID `dynamodbav:"link_id"`
}

// item returns the object for receiving item from dynamodb.
func (*Blob) item() interface{} {
	return &BlobItem{}
}

// FromItem scans the dynamodb response item into Blob.
func (b *Blob) FromItem(item interface{}) error {
	var blobItem BlobItem
	err := attributevalue.UnmarshalMap(item.(map[string]types.AttributeValue), &blobItem)
	if err != nil {
		return err
	}
	b.ID = blobItem.ID
	b.UUID = blobItem.UUID

	b.blob_parent = blobItem.BlobParent

	b.link_id = blobItem.LinkID

	return nil
}

// QueryParent queries the "parent" edge of the Blob entity.
func (b *Blob) QueryParent() *BlobQuery {
	return (&BlobClient{config: b.config}).QueryParent(b)
}

// QueryLinks queries the "links" edge of the Blob entity.
func (b *Blob) QueryLinks() *BlobQuery {
	return (&BlobClient{config: b.config}).QueryLinks(b)
}

// Update returns a builder for updating this Blob.
// Note that you need to call Blob.Unwrap() before calling this method if this Blob
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Blob) Update() *BlobUpdateOne {
	return (&BlobClient{config: b.config}).UpdateOne(b)
}

// String implements the fmt.Stringer.
func (b *Blob) String() string {
	var builder strings.Builder
	builder.WriteString("Blob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", b.UUID))
	builder.WriteByte(')')
	return builder.String()
}

// Blobs is a parsable slice of Blob.
type Blobs []*Blob

func (b Blobs) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
