// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Worth holds the value of the "worth" field.
	Worth uint `json:"worth,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges            UserEdges `json:"edges"`
	user_best_friend *int
	friend_id        []int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Cards holds the value of the cards edge.
	Cards []*Card `json:"cards,omitempty"`
	// Friends holds the value of the friends edge.
	Friends []*User `json:"friends,omitempty"`
	// BestFriend holds the value of the best_friend edge.
	BestFriend *User `json:"best_friend,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserItem represents item schema in MongoDB.
type UserItem struct {
	ID      int    `dynamodbav:"id"`
	Version int    `dynamodbav:"version"`
	Name    string `dynamodbav:"name"`
	Worth   uint   `dynamodbav:"worth"`

	UserBestFriend *int `dynamodbav:"user_best_friend"`

	FriendID []int `dynamodbav:"friend_id"`
}

// item returns the object for receiving item from dynamodb.
func (*User) item() interface{} {
	return &UserItem{}
}

// FromItem scans the dynamodb response item into User.
func (u *User) FromItem(item interface{}) error {
	var userItem UserItem
	err := attributevalue.UnmarshalMap(item.(map[string]types.AttributeValue), &userItem)
	if err != nil {
		return err
	}
	u.ID = userItem.ID
	u.Version = userItem.Version
	u.Name = userItem.Name
	u.Worth = userItem.Worth

	u.user_best_friend = userItem.UserBestFriend

	u.friend_id = userItem.FriendID

	return nil
}

// QueryCards queries the "cards" edge of the User entity.
func (u *User) QueryCards() *CardQuery {
	return (&UserClient{config: u.config}).QueryCards(u)
}

// QueryFriends queries the "friends" edge of the User entity.
func (u *User) QueryFriends() *UserQuery {
	return (&UserClient{config: u.config}).QueryFriends(u)
}

// QueryBestFriend queries the "best_friend" edge of the User entity.
func (u *User) QueryBestFriend() *UserQuery {
	return (&UserClient{config: u.config}).QueryBestFriend(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", u.Version))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("worth=")
	builder.WriteString(fmt.Sprintf("%v", u.Worth))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
