// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package card

import (
	"time"

	"entgo.io/ent/dialect/dynamodb"
	"entgo.io/ent/dialect/dynamodb/dynamodbgraph"
	"entgo.io/ent/entc/integration/dynamodb/hooks/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldID, id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldID, id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NEQ(FieldID, id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(dynamodb.In(FieldID, v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(dynamodb.NotIn(FieldID, v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GT(FieldID, id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GTE(FieldID, id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LT(FieldID, id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LTE(FieldID, id))
	})
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldNumber, v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldName, v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldCreatedAt, v))
	})
}

// InHook applies equality check predicate on the "in_hook" field. It's identical to InHookEQ.
func InHook(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldInHook, v))
	})
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldNumber, v))
	})
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NEQ(FieldNumber, v))
	})
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.In(FieldNumber, v...))
	})
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NotIn(FieldNumber, v...))
	})
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GT(FieldNumber, v))
	})
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GTE(FieldNumber, v))
	})
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LT(FieldNumber, v))
	})
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LTE(FieldNumber, v))
	})
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.Contains(FieldNumber, v))
	})
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.HasPrefix(FieldNumber, v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldName, v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NEQ(FieldName, v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.In(FieldName, v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NotIn(FieldName, v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GT(FieldName, v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GTE(FieldName, v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LT(FieldName, v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LTE(FieldName, v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.Contains(FieldName, v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.HasPrefix(FieldName, v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldCreatedAt, v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NEQ(FieldCreatedAt, v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.In(FieldCreatedAt, v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NotIn(FieldCreatedAt, v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GT(FieldCreatedAt, v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GTE(FieldCreatedAt, v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LT(FieldCreatedAt, v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LTE(FieldCreatedAt, v))
	})
}

// InHookEQ applies the EQ predicate on the "in_hook" field.
func InHookEQ(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.EQ(FieldInHook, v))
	})
}

// InHookNEQ applies the NEQ predicate on the "in_hook" field.
func InHookNEQ(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NEQ(FieldInHook, v))
	})
}

// InHookIn applies the In predicate on the "in_hook" field.
func InHookIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.In(FieldInHook, v...))
	})
}

// InHookNotIn applies the NotIn predicate on the "in_hook" field.
func InHookNotIn(vs ...string) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.NotIn(FieldInHook, v...))
	})
}

// InHookGT applies the GT predicate on the "in_hook" field.
func InHookGT(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GT(FieldInHook, v))
	})
}

// InHookGTE applies the GTE predicate on the "in_hook" field.
func InHookGTE(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.GTE(FieldInHook, v))
	})
}

// InHookLT applies the LT predicate on the "in_hook" field.
func InHookLT(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LT(FieldInHook, v))
	})
}

// InHookLTE applies the LTE predicate on the "in_hook" field.
func InHookLTE(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.LTE(FieldInHook, v))
	})
}

// InHookContains applies the Contains predicate on the "in_hook" field.
func InHookContains(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.Contains(FieldInHook, v))
	})
}

// InHookHasPrefix applies the HasPrefix predicate on the "in_hook" field.
func InHookHasPrefix(v string) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s.Where(dynamodb.HasPrefix(FieldInHook, v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		step := dynamodbgraph.NewStep(
			dynamodbgraph.From(Table, FieldID),
			dynamodbgraph.To(OwnerTable, FieldID, []string{}),
			dynamodbgraph.Edge(dynamodbgraph.M2O, true, false, OwnerTable, OwnerAttribute),
		)
		dynamodbgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		step := dynamodbgraph.NewStep(
			dynamodbgraph.From(Table, FieldID),
			dynamodbgraph.To(OwnerInverseTable, FieldID, []string{}),
			dynamodbgraph.Edge(dynamodbgraph.M2O, true, false, OwnerTable, OwnerAttribute),
		)
		dynamodbgraph.HasNeighborsWith(s, step, func(s *dynamodb.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s1 := s.Clone()
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		s1 := s.Clone()
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Card) predicate.Card {
	return predicate.Card(func(s *dynamodb.Selector) {
		p(s.Not())
	})
}
