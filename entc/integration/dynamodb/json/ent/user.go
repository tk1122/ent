// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"entgo.io/ent/entc/integration/dynamodb/json/ent/schema"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// T holds the value of the "t" field.
	T *schema.T `json:"t,omitempty"`
	// URL holds the value of the "url" field.
	URL *url.URL `json:"url,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw json.RawMessage `json:"raw,omitempty"`
	// Dirs holds the value of the "dirs" field.
	Dirs []http.Dir `json:"dirs,omitempty"`
	// Ints holds the value of the "ints" field.
	Ints []int `json:"ints,omitempty"`
	// Floats holds the value of the "floats" field.
	Floats []float64 `json:"floats,omitempty"`
	// Strings holds the value of the "strings" field.
	Strings []string `json:"strings,omitempty"`
}

// UserItem represents item schema in MongoDB.
type UserItem struct {
	ID      int             `dynamodbav:"id"`
	T       *schema.T       `dynamodbav:"t"`
	URL     *url.URL        `dynamodbav:"url"`
	Raw     json.RawMessage `dynamodbav:"raw"`
	Dirs    []http.Dir      `dynamodbav:"dirs"`
	Ints    []int           `dynamodbav:"ints"`
	Floats  []float64       `dynamodbav:"floats"`
	Strings []string        `dynamodbav:"strings"`
}

// item returns the object for receiving item from dynamodb.
func (*User) item() interface{} {
	return &UserItem{}
}

// FromItem scans the dynamodb response item into User.
func (u *User) FromItem(item interface{}) error {
	var userItem UserItem
	err := attributevalue.UnmarshalMap(item.(map[string]types.AttributeValue), &userItem)
	if err != nil {
		return err
	}
	u.ID = userItem.ID
	u.T = userItem.T
	u.URL = userItem.URL
	u.Raw = userItem.Raw
	u.Dirs = userItem.Dirs
	u.Ints = userItem.Ints
	u.Floats = userItem.Floats
	u.Strings = userItem.Strings

	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("t=")
	builder.WriteString(fmt.Sprintf("%v", u.T))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fmt.Sprintf("%v", u.URL))
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", u.Raw))
	builder.WriteString(", ")
	builder.WriteString("dirs=")
	builder.WriteString(fmt.Sprintf("%v", u.Dirs))
	builder.WriteString(", ")
	builder.WriteString("ints=")
	builder.WriteString(fmt.Sprintf("%v", u.Ints))
	builder.WriteString(", ")
	builder.WriteString("floats=")
	builder.WriteString(fmt.Sprintf("%v", u.Floats))
	builder.WriteString(", ")
	builder.WriteString("strings=")
	builder.WriteString(fmt.Sprintf("%v", u.Strings))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
