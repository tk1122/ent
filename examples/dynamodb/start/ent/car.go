// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	uuid "github.com/satori/go.uuid"
)

// Car is the model entity for the Car schema.
type Car struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// RegisteredAt holds the value of the "registered_at" field.
	RegisteredAt time.Time `json:"registered_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarQuery when eager-loading is set.
	Edges     CarEdges `json:"edges"`
	user_cars *uuid.UUID
}

// CarEdges holds the relations/edges for other nodes in the graph.
type CarEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CarItem represents item schema in MongoDB.
type CarItem struct {
	ID           uuid.UUID `dynamodbav:"id"`
	Model        string    `dynamodbav:"model"`
	RegisteredAt time.Time `dynamodbav:"registered_at"`

	UserCars *uuid.UUID `dynamodbav:"user_cars"`
}

// item returns the object for receiving item from dynamodb.
func (*Car) item() interface{} {
	return &CarItem{}
}

// FromItem scans the dynamodb response item into Car.
func (c *Car) FromItem(item interface{}) error {
	var carItem CarItem
	err := attributevalue.UnmarshalMap(item.(map[string]types.AttributeValue), &carItem)
	if err != nil {
		return err
	}
	c.ID = carItem.ID
	c.Model = carItem.Model
	c.RegisteredAt = carItem.RegisteredAt

	c.user_cars = carItem.UserCars

	return nil
}

// QueryOwner queries the "owner" edge of the Car entity.
func (c *Car) QueryOwner() *UserQuery {
	return (&CarClient{config: c.config}).QueryOwner(c)
}

// Update returns a builder for updating this Car.
// Note that you need to call Car.Unwrap() before calling this method if this Car
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Car) Update() *CarUpdateOne {
	return (&CarClient{config: c.config}).UpdateOne(c)
}

// String implements the fmt.Stringer.
func (c *Car) String() string {
	var builder strings.Builder
	builder.WriteString("Car(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("model=")
	builder.WriteString(c.Model)
	builder.WriteString(", ")
	builder.WriteString("registered_at=")
	builder.WriteString(c.RegisteredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Cars is a parsable slice of Car.
type Cars []*Car

func (c Cars) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
